# Coolify Configuration for n8n-clone
# This file provides Coolify-specific deployment configuration

version: '3.8'

# Service definitions optimized for Coolify deployment
services:
  postgres:
    image: postgres:15-alpine
    container_name: n8n-clone-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-n8n_clone}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./scripts:/app/scripts:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-n8n_clone}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - internal
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    labels:
      - "coolify.managed=true"
      - "coolify.type=database"
      - "coolify.name=n8n-clone-postgres"

  redis:
    image: redis:7-alpine
    container_name: n8n-clone-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - redis_backups:/backups
      - ./.coolify/redis-backup.sh:/usr/local/bin/redis-backup.sh:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - internal
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    labels:
      - "coolify.managed=true"
      - "coolify.type=cache"
      - "coolify.name=n8n-clone-redis"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: n8n-clone-backend
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-n8n_clone}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - PORT=4000
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - WEBHOOK_URL=${WEBHOOK_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - internal
      - external
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"
      - "coolify.name=n8n-clone-backend"
      - "coolify.port=4000"
      - "coolify.domain=${BACKEND_DOMAIN}"
      - "coolify.ssl=true"
      - "coolify.ssl.redirect=true"
      - "coolify.ssl.provider=letsencrypt"
      - "coolify.health_check=/health"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        - VITE_API_URL=${VITE_API_URL}
    container_name: n8n-clone-frontend
    environment:
      - NGINX_HOST=${NGINX_HOST:-localhost}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - external
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"
      - "coolify.name=n8n-clone-frontend"
      - "coolify.port=3000"
      - "coolify.domain=${FRONTEND_DOMAIN}"
      - "coolify.ssl=true"
      - "coolify.ssl.redirect=true"
      - "coolify.ssl.provider=letsencrypt"
      - "coolify.redirect_www=true"
      - "coolify.health_check=/health"

  # Database backup service
  postgres-backup:
    image: postgres:15-alpine
    container_name: n8n-clone-postgres-backup
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-n8n_clone}
      - BACKUP_DIR=/backups
      - RETENTION_DAYS=7
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_backups:/backups
      - ./scripts:/app/scripts:ro
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    networks:
      - internal
    profiles:
      - backup
    labels:
      - "coolify.managed=true"
      - "coolify.type=backup"
      - "coolify.name=n8n-clone-postgres-backup"
      - "coolify.schedule=0 2 * * *"
    command: ["/app/scripts/postgres-full-backup.sh"]

  # Redis backup service  
  redis-backup:
    image: redis:7-alpine
    container_name: n8n-clone-redis-backup
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - BACKUP_DIR=/backups
      - RETENTION_DAYS=7
    volumes:
      - redis_backups:/backups
      - ./.coolify/redis-backup.sh:/app/redis-backup.sh:ro
    depends_on:
      redis:
        condition: service_healthy
    restart: "no"
    networks:
      - internal
    profiles:
      - backup
    labels:
      - "coolify.managed=true"
      - "coolify.type=backup"
      - "coolify.name=n8n-clone-redis-backup"
      - "coolify.schedule=0 3 * * *"
    command: ["/app/redis-backup.sh"]

# Network configuration for Coolify deployment
networks:
  internal:
    driver: bridge
    internal: true
    name: n8n-clone-internal
  external:
    driver: bridge
    name: n8n-clone-external

# Persistent volume configuration
volumes:
  postgres_data:
    driver: local
    name: n8n-clone-postgres-data
    driver_opts:
      type: none
      o: bind
      device: /var/lib/coolify/volumes/n8n-clone-postgres-data
  redis_data:
    driver: local
    name: n8n-clone-redis-data
    driver_opts:
      type: none
      o: bind
      device: /var/lib/coolify/volumes/n8n-clone-redis-data
  postgres_backups:
    driver: local
    name: n8n-clone-postgres-backups
    driver_opts:
      type: none
      o: bind
      device: /var/lib/coolify/volumes/n8n-clone-postgres-backups
  redis_backups:
    driver: local
    name: n8n-clone-redis-backups
    driver_opts:
      type: none
      o: bind
      device: /var/lib/coolify/volumes/n8n-clone-redis-backups

# Coolify-specific metadata and configuration
x-coolify:
  project: n8n-clone
  description: "Workflow automation platform with visual workflow builder"
  environment: production
  auto_deploy: true
  build_pack: docker-compose
  compose_file: coolify.yaml
  services:
    frontend:
      type: application
      port: 3000
      domain: ${FRONTEND_DOMAIN}
      ssl: true
      redirect_www: true
      health_check: /health
    backend:
      type: application
      port: 4000
      domain: ${BACKEND_DOMAIN}
      ssl: true
      health_check: /health
    postgres:
      type: database
      internal_only: true
    redis:
      type: cache
      internal_only: true
  networks:
    internal:
      services: [postgres, redis, backend]
      external_access: false
    external:
      services: [frontend, backend]
      external_access: true
  environment_variables:
    required: [POSTGRES_PASSWORD, JWT_SECRET, SESSION_SECRET, CORS_ORIGIN, VITE_API_URL]
    optional: [LOG_LEVEL, NGINX_HOST, WEBHOOK_URL]