{
  "project_name": "n8n-clone",
  "description": "Environment configuration for n8n-clone Coolify deployment",
  "version": "1.0.0",
  "environment_variables": {
    "secrets": {
      "POSTGRES_PASSWORD": {
        "description": "PostgreSQL database password - auto-generated secure password",
        "type": "secret",
        "generate": "password",
        "length": 32,
        "required": true,
        "validation": {
          "min_length": 16,
          "pattern": "^[A-Za-z0-9!@#$%^&*()_+=-]{16,}$"
        }
      },
      "JWT_SECRET": {
        "description": "JWT signing secret for authentication tokens",
        "type": "secret",
        "generate": "random",
        "length": 64,
        "required": true,
        "validation": {
          "min_length": 32,
          "pattern": "^[A-Za-z0-9!@#$%^&*()_+=-]{32,}$"
        }
      },
      "SESSION_SECRET": {
        "description": "Session encryption secret for secure sessions",
        "type": "secret",
        "generate": "random",
        "length": 32,
        "required": true,
        "validation": {
          "min_length": 16,
          "pattern": "^[A-Za-z0-9!@#$%^&*()_+=-]{16,}$"
        }
      },
      "ENCRYPTION_KEY": {
        "description": "32-character encryption key for sensitive data",
        "type": "secret",
        "generate": "random",
        "length": 32,
        "required": true,
        "validation": {
          "exact_length": 32,
          "pattern": "^[A-Za-z0-9]{32}$"
        }
      }
    },
    "configuration": {
      "CORS_ORIGIN": {
        "description": "Frontend domain for CORS configuration",
        "type": "url",
        "required": true,
        "example": "https://yourdomain.com",
        "validation": {
          "pattern": "^https?://[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        }
      },
      "VITE_API_URL": {
        "description": "Backend API URL for frontend application",
        "type": "url",
        "required": true,
        "example": "https://api.yourdomain.com",
        "validation": {
          "pattern": "^https?://[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        }
      },
      "WEBHOOK_URL": {
        "description": "Base URL for webhook endpoints",
        "type": "url",
        "required": true,
        "example": "https://yourdomain.com",
        "validation": {
          "pattern": "^https?://[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        }
      },
      "FRONTEND_DOMAIN": {
        "description": "Frontend domain name (without protocol)",
        "type": "domain",
        "required": true,
        "example": "yourdomain.com",
        "validation": {
          "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        }
      },
      "BACKEND_DOMAIN": {
        "description": "Backend API domain name (without protocol)",
        "type": "domain",
        "required": true,
        "example": "api.yourdomain.com",
        "validation": {
          "pattern": "^[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
        }
      }
    },
    "database": {
      "POSTGRES_DB": {
        "description": "PostgreSQL database name",
        "type": "string",
        "default": "n8n_clone",
        "required": false,
        "validation": {
          "pattern": "^[a-zA-Z0-9_]+$",
          "max_length": 63
        }
      },
      "POSTGRES_USER": {
        "description": "PostgreSQL username",
        "type": "string",
        "default": "postgres",
        "required": false,
        "validation": {
          "pattern": "^[a-zA-Z0-9_]+$",
          "max_length": 63
        }
      }
    },
    "application": {
      "NODE_ENV": {
        "description": "Node.js environment mode",
        "type": "enum",
        "default": "production",
        "required": false,
        "options": ["production", "staging", "development"],
        "validation": {
          "enum": ["production", "staging", "development"]
        }
      },
      "LOG_LEVEL": {
        "description": "Application logging level",
        "type": "enum",
        "default": "info",
        "required": false,
        "options": ["error", "warn", "info", "debug"],
        "validation": {
          "enum": ["error", "warn", "info", "debug"]
        }
      },
      "PORT": {
        "description": "Backend server port",
        "type": "number",
        "default": 4000,
        "required": false,
        "validation": {
          "min": 1024,
          "max": 65535
        }
      },
      "FRONTEND_PORT": {
        "description": "Frontend server port",
        "type": "number",
        "default": 3000,
        "required": false,
        "validation": {
          "min": 1024,
          "max": 65535
        }
      }
    },
    "computed": {
      "DATABASE_URL": {
        "description": "Generated PostgreSQL connection string",
        "type": "computed",
        "template": "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}",
        "required": true
      },
      "REDIS_URL": {
        "description": "Generated Redis connection string",
        "type": "computed",
        "template": "redis://redis:6379",
        "required": true
      }
    },
    "optional": {
      "NGINX_HOST": {
        "description": "Nginx server name configuration",
        "type": "string",
        "default": "localhost",
        "required": false
      },
      "BCRYPT_ROUNDS": {
        "description": "BCrypt hashing rounds for password security",
        "type": "number",
        "default": 12,
        "required": false,
        "validation": {
          "min": 10,
          "max": 15
        }
      },
      "JWT_EXPIRES_IN": {
        "description": "JWT token expiration time",
        "type": "string",
        "default": "7d",
        "required": false,
        "validation": {
          "pattern": "^\\d+[smhd]$"
        }
      }
    }
  },
  "service_environment_mapping": {
    "frontend": [
      "VITE_API_URL",
      "NGINX_HOST",
      "FRONTEND_PORT"
    ],
    "backend": [
      "NODE_ENV",
      "DATABASE_URL",
      "REDIS_URL",
      "JWT_SECRET",
      "SESSION_SECRET",
      "ENCRYPTION_KEY",
      "PORT",
      "LOG_LEVEL",
      "CORS_ORIGIN",
      "WEBHOOK_URL",
      "BCRYPT_ROUNDS",
      "JWT_EXPIRES_IN"
    ],
    "postgres": [
      "POSTGRES_DB",
      "POSTGRES_USER",
      "POSTGRES_PASSWORD"
    ],
    "redis": []
  },
  "validation_rules": {
    "domain_consistency": {
      "description": "Ensure domain configurations are consistent",
      "rules": [
        {
          "condition": "CORS_ORIGIN should match FRONTEND_DOMAIN with https protocol",
          "validation": "CORS_ORIGIN === `https://${FRONTEND_DOMAIN}`"
        },
        {
          "condition": "VITE_API_URL should match BACKEND_DOMAIN with https protocol",
          "validation": "VITE_API_URL === `https://${BACKEND_DOMAIN}`"
        },
        {
          "condition": "WEBHOOK_URL should match FRONTEND_DOMAIN with https protocol",
          "validation": "WEBHOOK_URL === `https://${FRONTEND_DOMAIN}`"
        }
      ]
    },
    "security_requirements": {
      "description": "Security validation requirements",
      "rules": [
        {
          "condition": "All secrets must be at least 16 characters",
          "validation": "length >= 16"
        },
        {
          "condition": "Production environment must use HTTPS",
          "validation": "NODE_ENV === 'production' ? urls.startsWith('https://') : true"
        }
      ]
    }
  }
}