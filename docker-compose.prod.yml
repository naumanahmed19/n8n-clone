version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: n8n-clone-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-n8n_clone}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-n8n_clone}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network
    # Security: no external ports exposed
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  redis:
    image: redis:7-alpine
    container_name: n8n-clone-redis-prod
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - app-network
    # Security: no external ports exposed
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
      args:
        - BASE_IMAGE=node:22-alpine
        - SOURCE_COMMIT=${SOURCE_COMMIT:-latest}
        - CORS_ORIGIN=${CORS_ORIGIN:-*}
    container_name: n8n-clone-backend-prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-n8n_clone}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - PORT=4000
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - SESSION_SECRET=${SESSION_SECRET}
      - WEBHOOK_URL=${WEBHOOK_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    # Only expose port if not using reverse proxy
    ports:
      - "${BACKEND_PORT:-4000}:4000"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        - BASE_IMAGE=node:22-alpine
        - VITE_API_URL=${VITE_API_URL:-http://localhost:4000}
    container_name: n8n-clone-frontend-prod
    environment:
      - NGINX_HOST=${NGINX_HOST:-localhost}
      - NGINX_PORT=3000
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    ports:
      - "${FRONTEND_PORT:-3000}:3000"

networks:
  app-network:
    driver: bridge
    name: n8n-clone-network

volumes:
  postgres_data:
    driver: local
    name: n8n-clone-postgres-data
  redis_data:
    driver: local
    name: n8n-clone-redis-data