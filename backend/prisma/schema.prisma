generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  password    String
  name        String?
  role        UserRole     @default(USER)
  active      Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  credentials Credential[]
  workflows   Workflow[]
  variables   Variable[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  color       String?
  icon        String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

model Workflow {
  id               String                  @id @default(cuid())
  name             String
  description      String?
  category         String?
  tags             String[]                @default([])
  userId           String
  nodes            Json                    @default("[]")
  connections      Json                    @default("[]")
  triggers         Json                    @default("[]")
  settings         Json                    @default("{}")
  active           Boolean                 @default(false)
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  executionHistory ExecutionHistory[]
  executions       Execution[]
  variables        Variable[]
  environments     WorkflowEnvironment[]
  user             User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("workflows")
}

model WorkflowEnvironment {
  id             String                       @id @default(cuid())
  workflowId     String
  environment    EnvironmentType              @default(DEVELOPMENT)
  version        String                       @default("1.0.0")
  nodes          Json                         @default("[]")
  connections    Json                         @default("[]")
  triggers       Json                         @default("[]")
  settings       Json                         @default("{}")
  variables      Json                         @default("{}")
  active         Boolean                      @default(false)
  deployedAt     DateTime?
  deployedBy     String?
  deploymentNote String?
  status         EnvironmentStatus            @default(DRAFT)
  createdAt      DateTime                     @default(now())
  updatedAt      DateTime                     @updatedAt
  workflow       Workflow                     @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  deployments    WorkflowEnvironmentDeployment[]

  @@unique([workflowId, environment])
  @@index([workflowId])
  @@index([environment])
  @@index([status])
  @@map("workflow_environments")
}

model WorkflowEnvironmentDeployment {
  id                String              @id @default(cuid())
  environmentId     String
  version           String
  deployedBy        String
  deployedAt        DateTime            @default(now())
  sourceEnvironment EnvironmentType?
  deploymentNote    String?
  snapshot          Json                // Complete snapshot of workflow state
  status            DeploymentStatus    @default(SUCCESS)
  rollbackFrom      String?             // ID of deployment this rolled back from
  createdAt         DateTime            @default(now())
  environment       WorkflowEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@index([environmentId])
  @@index([deployedAt])
  @@map("workflow_environment_deployments")
}

enum EnvironmentType {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

enum EnvironmentStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum DeploymentStatus {
  SUCCESS
  FAILED
  ROLLBACK
}

model Execution {
  id                  String               @id @default(cuid())
  workflowId          String
  environment         EnvironmentType      @default(DEVELOPMENT)
  status              ExecutionStatus      @default(RUNNING)
  startedAt           DateTime             @default(now())
  finishedAt          DateTime?
  triggerData         Json?
  error               Json?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  cancelledAt         DateTime?
  executionType       String               @default("workflow")
  flowExecutionPath   String[]
  flowMetrics         Json?
  flowProgressData    Json?
  pausedAt            DateTime?
  progress            Int?                 @default(0)
  resumedAt           DateTime?
  workflowSnapshot    Json?                // Workflow state at execution time (nodes, connections, settings)
  snapshotVersion     String?              // Snapshot version for tracking
  snapshotHash        String?              // Hash of workflow structure for quick comparison
  executionHistory    ExecutionHistory[]
  workflow            Workflow             @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  flowExecutionStates FlowExecutionState[]
  nodeExecutions      NodeExecution[]

  @@index([environment])
  @@map("executions")
}

model NodeExecution {
  id             String              @id @default(cuid())
  nodeId         String
  executionId    String
  status         NodeExecutionStatus @default(WAITING)
  inputData      Json?
  outputData     Json?
  error          Json?
  startedAt      DateTime?
  finishedAt     DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  dependencies   String[]
  executionOrder Int?
  parentNodeId   String?
  progress       Int?                @default(0)
  triggerId      String?
  visualState    Json?
  execution      Execution           @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@map("node_executions")
}

model Credential {
  id        String    @id @default(cuid())
  name      String
  type      String
  userId    String
  data      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@map("credentials")
}

model Variable {
  id          String        @id @default(cuid())
  key         String
  value       String
  description String?
  scope       VariableScope @default(GLOBAL)
  workflowId  String?
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflow    Workflow?     @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([userId, key, workflowId])
  @@index([userId, scope])
  @@index([workflowId])
  @@map("variables")
}

enum VariableScope {
  GLOBAL
  LOCAL
}

model NodeType {
  id                 String   @id @default(cuid())
  type               String   @unique
  displayName        String
  name               String
  group              String[]
  version            Int      @default(1)
  description        String
  defaults           Json     @default("{}")
  inputs             String[]
  outputs            String[]
  properties         Json     @default("[]")
  credentials        Json?    // Credential type definitions
  credentialSelector Json?    // Unified credential selector configuration
  icon               String?
  color              String?
  outputComponent    String?  // Custom output component identifier for dynamic rendering
  active             Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("node_types")
}

// SingleNodeExecution model removed - now using unified Execution model for both workflows and single nodes

model FlowExecutionState {
  id             String    @id @default(cuid())
  executionId    String
  nodeId         String
  status         String    @default("idle")
  progress       Int?      @default(0)
  startTime      DateTime?
  endTime        DateTime?
  duration       Int?
  inputData      Json?
  outputData     Json?
  error          Json?
  dependencies   String[]
  executionOrder Int?
  animationState String    @default("idle")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  execution      Execution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@index([executionId])
  @@index([nodeId])
  @@index([status])
  @@map("flow_execution_states")
}

model ExecutionHistory {
  id             String    @id @default(cuid())
  executionId    String
  workflowId     String
  triggerType    String
  startTime      DateTime
  endTime        DateTime?
  status         String
  executedNodes  String[]
  executionPath  String[]
  metrics        Json?
  error          Json?
  duration       Int?
  nodeCount      Int?      @default(0)
  completedNodes Int?      @default(0)
  failedNodes    Int?      @default(0)
  createdAt      DateTime  @default(now())
  execution      Execution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  workflow       Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([executionId])
  @@index([workflowId])
  @@index([startTime])
  @@map("execution_history")
}

enum UserRole {
  USER
  ADMIN
}

enum ExecutionStatus {
  RUNNING
  SUCCESS
  ERROR
  CANCELLED
  PAUSED
  TIMEOUT
}

enum NodeExecutionStatus {
  WAITING
  RUNNING
  SUCCESS
  ERROR
  QUEUED
  CANCELLED
  PAUSED
  SKIPPED
  IDLE
  COMPLETED
  FAILED
}
