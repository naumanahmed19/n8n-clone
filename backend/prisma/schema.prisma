// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(USER)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  workflows   Workflow[]
  credentials Credential[]

  @@map("users")
}

model Workflow {
  id          String            @id @default(cuid())
  name        String
  description String?
  userId      String
  nodes       Json              @default("[]")
  connections Json              @default("[]")
  triggers    Json              @default("[]")
  settings    Json              @default("{}")
  active      Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions       Execution[]
  executionHistory ExecutionHistory[]

  @@map("workflows")
}

model Execution {
  id                String               @id @default(cuid())
  workflowId        String
  status            ExecutionStatus      @default(RUNNING)
  executionType     String               @default("workflow") // "workflow", "node", "trigger", "flow"
  startedAt         DateTime             @default(now())
  finishedAt        DateTime?
  pausedAt          DateTime?
  resumedAt         DateTime?
  cancelledAt       DateTime?
  progress          Int?                 @default(0)
  triggerData       Json?
  error             Json?
  flowExecutionPath String[]
  flowProgressData  Json?
  flowMetrics       Json?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  // Relations
  workflow            Workflow               @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  nodeExecutions      NodeExecution[]
  flowExecutionStates FlowExecutionState[]
  executionHistory    ExecutionHistory[]

  @@map("executions")
}

model NodeExecution {
  id             String              @id @default(cuid())
  nodeId         String
  executionId    String
  status         NodeExecutionStatus @default(WAITING)
  executionOrder Int?
  dependencies   String[]
  parentNodeId   String?
  triggerId      String?
  progress       Int?                @default(0)
  inputData      Json?
  outputData     Json?
  error          Json?
  visualState    Json?
  startedAt      DateTime?
  finishedAt     DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  // Relations
  execution Execution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@map("node_executions")
}

model Credential {
  id        String    @id @default(cuid())
  name      String
  type      String
  userId    String
  data      String    // Encrypted credential data
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@map("credentials")
}

model NodeType {
  id          String   @id @default(cuid())
  type        String   @unique
  displayName String
  name        String
  group       String[]
  version     Int      @default(1)
  description String
  defaults    Json     @default("{}")
  inputs      String[]
  outputs     String[]
  properties  Json     @default("[]")
  icon        String?
  color       String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("node_types")
}

model SingleNodeExecution {
  id          String              @id
  workflowId  String
  nodeId      String
  nodeType    String
  status      NodeExecutionStatus @default(RUNNING)
  startedAt   DateTime            @default(now())
  finishedAt  DateTime?
  inputData   Json?
  outputData  Json?
  parameters  Json                @default("{}")
  error       String?
  userId      String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@map("single_node_executions")
}

model FlowExecutionState {
  id             String    @id @default(cuid())
  executionId    String
  nodeId         String
  status         String    @default("idle")
  progress       Int?      @default(0)
  startTime      DateTime?
  endTime        DateTime?
  duration       Int?
  inputData      Json?
  outputData     Json?
  error          Json?
  dependencies   String[]
  executionOrder Int?
  animationState String    @default("idle")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  execution Execution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@index([executionId])
  @@index([nodeId])
  @@index([status])
  @@map("flow_execution_states")
}

model ExecutionHistory {
  id             String    @id @default(cuid())
  executionId    String
  workflowId     String
  triggerType    String
  startTime      DateTime
  endTime        DateTime?
  status         String
  executedNodes  String[]
  executionPath  String[]
  metrics        Json?
  error          Json?
  duration       Int?
  nodeCount      Int?      @default(0)
  completedNodes Int?      @default(0)
  failedNodes    Int?      @default(0)
  createdAt      DateTime  @default(now())

  // Relations
  execution Execution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  workflow  Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([executionId])
  @@index([workflowId])
  @@index([startTime])
  @@map("execution_history")
}

enum UserRole {
  USER
  ADMIN
}

enum ExecutionStatus {
  RUNNING
  SUCCESS
  ERROR
  CANCELLED
  PAUSED
  TIMEOUT
}

enum NodeExecutionStatus {
  WAITING
  QUEUED
  RUNNING
  SUCCESS
  ERROR
  CANCELLED
  PAUSED
  SKIPPED
  IDLE
  COMPLETED
  FAILED
}